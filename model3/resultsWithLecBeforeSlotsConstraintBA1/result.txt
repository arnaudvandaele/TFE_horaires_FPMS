14:08:25
0.4539988040924072
Model: runModel3
 - source file: D:/Thomas/Documents/UNIF/MA2/TFE/Solver/model3/runModel3.py
 - modeling time: 0.55 sec
 - number of integer variables:  0
 - number of interval variables: 449
 - number of expressions:        1669
 - number of expression nodes:   17548
 - operations:                   _trunc: 556, and: 2533, endBeforeStart: 56, endOf: 1993, equal: 330, floatDiv: 556, forbidExtent: 424, forbidStart: 134, greaterOrEqual: 1422, lessOrEqual: 1993, minimize: 1, minus: 80, noOverlap: 152, or: 327, scalProd: 1, startAtStart: 16, startEval: 248, startOf: 2613, sum: 2
StartSolve: Unknown, objective: None bounds: None, gaps: None, time: 0, memory: 3401576
StartExtraction: Unknown, objective: None bounds: None, gaps: None, time: 0, memory: 3404504
 ! --------------------------------------------------- CP Optimizer 20.1.0.0 --
 ! Minimization problem - 601 variables, 1667 constraints
 ! Presolve      : 376 extractables eliminated, 73 constraints generated
 ! TimeLimit            = 7200
 ! LogVerbosity         = Terse
 ! Initial process time : 0.05s (0.05s extraction + 0.00s propagation)
 !  . Log search space  : 1968.4 (before), 1968.4 (after)
 !  . Memory usage      : 5.6 MB (before), 5.6 MB (after)
 ! Using parallel search with 12 workers.
 ! ----------------------------------------------------------------------------
 !          Best Branches  Non-fixed    W       Branch decision
EndExtraction: Unknown, objective: None bounds: None, gaps: None, time: 0.047, memory: 11618344
StartSearch: Unknown, objective: None bounds: None, gaps: None, time: 0.054, memory: 11625328
StartInitialPropagation: Unknown, objective: None bounds: None, gaps: None, time: 0.055, memory: 11625944
EndInitialPropagation: Unknown, objective: None bounds: None, gaps: None, time: 0.06, memory: 12135584
                        0        531                 -
 + New bound is 0
ObjBound: Unknown, objective: None bounds: (0,), gaps: None, time: 0.06, memory: 12136002
 ! Using iterative diving.
 ! Using temporal relaxation.
 ! Using failure-directed search.
 *           216    5552k  1207.78s     1      (gap is 100.0%)
Solution: Feasible, objective: (216,) bounds: (0,), gaps: (1,), time: 1207.78, memory: 88795274
 *           206   25874k  1213.29s     7      (gap is 100.0%)
Solution: Feasible, objective: (206,) bounds: (0,), gaps: (1,), time: 1213.29, memory: 91136230
 *           205   25874k  1213.29s     7      (gap is 100.0%)
Solution: Feasible, objective: (205,) bounds: (0,), gaps: (1,), time: 1213.29, memory: 91137192
 *           200   25874k  1213.86s     7      (gap is 100.0%)
Solution: Feasible, objective: (200,) bounds: (0,), gaps: (1,), time: 1213.85, memory: 91377483
 *           198   25883k  1214.37s     7      (gap is 100.0%)
Solution: Feasible, objective: (198,) bounds: (0,), gaps: (1,), time: 1214.37, memory: 111329674
 *           184   25885k  1214.37s     7      (gap is 100.0%)
Solution: Feasible, objective: (184,) bounds: (0,), gaps: (1,), time: 1214.37, memory: 111357958
 *           176   25889k  1214.72s     7      (gap is 100.0%)
Solution: Feasible, objective: (176,) bounds: (0,), gaps: (1,), time: 1214.72, memory: 111819579
 *           174   25890k  1214.89s     7      (gap is 100.0%)
Solution: Feasible, objective: (174,) bounds: (0,), gaps: (1,), time: 1214.89, memory: 112038775
 *           162   25892k  1215.05s     7      (gap is 100.0%)
Solution: Feasible, objective: (162,) bounds: (0,), gaps: (1,), time: 1215.05, memory: 112265062
 *           161    24977  1216.08s    12      (gap is 100.0%)
Solution: Feasible, objective: (161,) bounds: (0,), gaps: (1,), time: 1216.08, memory: 113162227
 *           160    25546  1216.09s    12      (gap is 100.0%)
Solution: Feasible, objective: (160,) bounds: (0,), gaps: (1,), time: 1216.09, memory: 113194295
 *           154   25901k  1216.43s     7      (gap is 100.0%)
Solution: Feasible, objective: (154,) bounds: (0,), gaps: (1,), time: 1216.43, memory: 113511041
 *           150   25903k  1216.61s     7      (gap is 100.0%)
Solution: Feasible, objective: (150,) bounds: (0,), gaps: (1,), time: 1216.61, memory: 116409212
 *           147    35482  1217.14s    12      (gap is 100.0%)
Solution: Feasible, objective: (147,) bounds: (0,), gaps: (1,), time: 1217.14, memory: 114339292
 *           143    35582  1217.34s    12      (gap is 100.0%)
Solution: Feasible, objective: (143,) bounds: (0,), gaps: (1,), time: 1217.34, memory: 114890362
 *           142    35950  1217.35s    12      (gap is 100.0%)
Solution: Feasible, objective: (142,) bounds: (0,), gaps: (1,), time: 1217.35, memory: 114889618
 *           140    36073  1217.35s    12      (gap is 100.0%)
Solution: Feasible, objective: (140,) bounds: (0,), gaps: (1,), time: 1217.35, memory: 114889362
 *           138   25909k  1217.51s     7      (gap is 100.0%)
Solution: Feasible, objective: (138,) bounds: (0,), gaps: (1,), time: 1217.51, memory: 115098101
 *           137    51201  1217.70s    10      (gap is 100.0%)
 ! Time = 1217.70s, Average fail depth = 212, Memory usage = 116.3 MB
 ! Current bound is 0 (gap is 100.0%)
 !          Best Branches  Non-fixed    W       Branch decision
Solution: Feasible, objective: (137,) bounds: (0,), gaps: (1,), time: 1217.7, memory: 116269311
 *           136    51358  1217.71s    10      (gap is 100.0%)
Solution: Feasible, objective: (136,) bounds: (0,), gaps: (1,), time: 1217.71, memory: 116269734
 *           134    35745  1217.71s    11      (gap is 100.0%)
Solution: Feasible, objective: (134,) bounds: (0,), gaps: (1,), time: 1217.71, memory: 116269196
 *           128    52247  1217.89s    10      (gap is 100.0%)
Solution: Feasible, objective: (128,) bounds: (0,), gaps: (1,), time: 1217.88, memory: 116452733
 *           126   25912k  1218.07s     7      (gap is 100.0%)
Solution: Feasible, objective: (126,) bounds: (0,), gaps: (1,), time: 1218.07, memory: 116654495
 *           123    37996  1218.29s    11      (gap is 100.0%)
Solution: Feasible, objective: (123,) bounds: (0,), gaps: (1,), time: 1218.29, memory: 116837426
 *           119    38276  1218.47s    11      (gap is 100.0%)
Solution: Feasible, objective: (119,) bounds: (0,), gaps: (1,), time: 1218.47, memory: 117035090
 *           117   25915k  1218.67s     7      (gap is 100.0%)
Solution: Feasible, objective: (117,) bounds: (0,), gaps: (1,), time: 1218.66, memory: 117280506
 *           116    57501  1218.85s    10      (gap is 100.0%)
Solution: Feasible, objective: (116,) bounds: (0,), gaps: (1,), time: 1218.85, memory: 117821705
 *           113    57902  1218.86s    10      (gap is 100.0%)
Solution: Feasible, objective: (113,) bounds: (0,), gaps: (1,), time: 1218.86, memory: 117822152
 *           110   25920k  1219.42s     7      (gap is 100.0%)
Solution: Feasible, objective: (110,) bounds: (0,), gaps: (1,), time: 1219.41, memory: 118281969
 *           109    61098  1219.64s    10      (gap is 100.0%)
Solution: Feasible, objective: (109,) bounds: (0,), gaps: (1,), time: 1219.64, memory: 118766621
 *           107    43383  1219.65s    11      (gap is 100.0%)
Solution: Feasible, objective: (107,) bounds: (0,), gaps: (1,), time: 1219.64, memory: 118766931
 *           106    62920  1220.06s    10      (gap is 100.0%)
Solution: Feasible, objective: (106,) bounds: (0,), gaps: (1,), time: 1220.06, memory: 118908043
 *           105    65469  1220.65s    10      (gap is 100.0%)
Solution: Feasible, objective: (105,) bounds: (0,), gaps: (1,), time: 1220.65, memory: 119161236
 *           104    46802  1220.83s    11      (gap is 100.0%)
Solution: Feasible, objective: (104,) bounds: (0,), gaps: (1,), time: 1220.83, memory: 119730541
 *           102    66649  1220.84s    10      (gap is 100.0%)
Solution: Feasible, objective: (102,) bounds: (0,), gaps: (1,), time: 1220.84, memory: 119730966
 *           101   25928k  1221.01s     7      (gap is 100.0%)
Solution: Feasible, objective: (101,) bounds: (0,), gaps: (1,), time: 1221.01, memory: 119918164
 *           100    56906  1221.75s    12      (gap is 100.0%)
Solution: Feasible, objective: (100,) bounds: (0,), gaps: (1,), time: 1221.75, memory: 120106462
 *            95    55639  1222.69s    11      (gap is 100.0%)
Solution: Feasible, objective: (95,) bounds: (0,), gaps: (1,), time: 1222.69, memory: 120329175
 *            94    85014  1224.44s    10      (gap is 100.0%)
 ! Time = 1224.44s, Average fail depth = 196, Memory usage = 120.4 MB
 ! Current bound is 0 (gap is 100.0%)
 !          Best Branches  Non-fixed    W       Branch decision
Solution: Feasible, objective: (94,) bounds: (0,), gaps: (1,), time: 1224.44, memory: 120350935
 *            91   25962k  1226.88s     7      (gap is 100.0%)
Solution: Feasible, objective: (91,) bounds: (0,), gaps: (1,), time: 1226.88, memory: 122917147
 *            90   25963k  1227.06s     7      (gap is 100.0%)
Solution: Feasible, objective: (90,) bounds: (0,), gaps: (1,), time: 1227.06, memory: 123078628
 *            85    85141  1228.38s    11      (gap is 100.0%)
Solution: Feasible, objective: (85,) bounds: (0,), gaps: (1,), time: 1228.38, memory: 123294132
 *            84   25971k  1228.77s     7      (gap is 100.0%)
Solution: Feasible, objective: (84,) bounds: (0,), gaps: (1,), time: 1228.77, memory: 123498626
 *            82   25973k  1229.32s     7      (gap is 100.0%)
Solution: Feasible, objective: (82,) bounds: (0,), gaps: (1,), time: 1229.32, memory: 123877769
 *            80   25973k  1229.33s     7      (gap is 100.0%)
Solution: Feasible, objective: (80,) bounds: (0,), gaps: (1,), time: 1229.33, memory: 123877544
 *            79   25981k  1231.93s     7      (gap is 100.0%)
Solution: Feasible, objective: (79,) bounds: (0,), gaps: (1,), time: 1231.93, memory: 124065766
 *            75     111k  1233.01s    11      (gap is 100.0%)
Solution: Feasible, objective: (75,) bounds: (0,), gaps: (1,), time: 1233.01, memory: 124261265
 *            73   26010k  1237.53s     7      (gap is 100.0%)
Solution: Feasible, objective: (73,) bounds: (0,), gaps: (1,), time: 1237.53, memory: 124521951
 *            70   26010k  1237.71s     7      (gap is 100.0%)
Solution: Feasible, objective: (70,) bounds: (0,), gaps: (1,), time: 1237.7, memory: 124712387
 *            69     157k  1239.65s    10      (gap is 100.0%)
Solution: Feasible, objective: (69,) bounds: (0,), gaps: (1,), time: 1239.65, memory: 124878511
 *            68     163k  1241.50s    11      (gap is 100.0%)
Solution: Feasible, objective: (68,) bounds: (0,), gaps: (1,), time: 1241.5, memory: 125054796
 *            67   26073k  1248.15s     7      (gap is 100.0%)
Solution: Feasible, objective: (67,) bounds: (0,), gaps: (1,), time: 1248.15, memory: 125484399
 *            65   26073k  1248.15s     7      (gap is 100.0%)
Solution: Feasible, objective: (65,) bounds: (0,), gaps: (1,), time: 1248.15, memory: 125485293
 *            64     216k  1248.53s    12      (gap is 100.0%)
Solution: Feasible, objective: (64,) bounds: (0,), gaps: (1,), time: 1248.53, memory: 125706296
 *            62   26082k  1250.17s     7      (gap is 100.0%)
Solution: Feasible, objective: (62,) bounds: (0,), gaps: (1,), time: 1250.17, memory: 125872807
 *            61   26118k  1257.39s     7      (gap is 100.0%)
Solution: Feasible, objective: (61,) bounds: (0,), gaps: (1,), time: 1257.39, memory: 129084036
 *            60   26294k  1294.20s     7      (gap is 100.0%)
Solution: Feasible, objective: (60,) bounds: (0,), gaps: (1,), time: 1294.2, memory: 130986352
 *            58   25934k  1296.94s     4      (gap is 100.0%)
Solution: Feasible, objective: (58,) bounds: (0,), gaps: (1,), time: 1296.94, memory: 131478844
 *            56   29391k  1335.38s     9      (gap is 100.0%)
 ! Time = 1335.38s, Average fail depth = 182, Memory usage = 132.0 MB
 ! Current bound is 0 (gap is 100.0%)
 !          Best Branches  Non-fixed    W       Branch decision
Solution: Feasible, objective: (56,) bounds: (0,), gaps: (1,), time: 1335.38, memory: 131969394
 *            54   29425k  1340.75s     9      (gap is 100.0%)
Solution: Feasible, objective: (54,) bounds: (0,), gaps: (1,), time: 1340.75, memory: 132161848
 *            52   26492k  1343.11s     7      (gap is 100.0%)
Solution: Feasible, objective: (52,) bounds: (0,), gaps: (1,), time: 1343.11, memory: 132410185
 *            51   27893k  1382.80s     2      (gap is 100.0%)
Solution: Feasible, objective: (51,) bounds: (0,), gaps: (1,), time: 1382.8, memory: 134404442
 *            49     950k  1396.67s    11      (gap is 100.0%)
Solution: Feasible, objective: (49,) bounds: (0,), gaps: (1,), time: 1396.67, memory: 134625632
 *            48   26433k  1407.21s     4      (gap is 100.0%)
Solution: Feasible, objective: (48,) bounds: (0,), gaps: (1,), time: 1407.21, memory: 136048600
 *            46   28211k  1453.96s     2      (gap is 100.0%)
Solution: Feasible, objective: (46,) bounds: (0,), gaps: (1,), time: 1453.96, memory: 126380487
 *            45    1344k  1486.27s    11      (gap is 100.0%)
Solution: Feasible, objective: (45,) bounds: (0,), gaps: (1,), time: 1486.27, memory: 126371402
 *            43   30378k  1534.01s     9      (gap is 100.0%)
Solution: Feasible, objective: (43,) bounds: (0,), gaps: (1,), time: 1534.01, memory: 126529634
 *            42   28423k  1765.07s     8      (gap is 100.0%)
Solution: Feasible, objective: (42,) bounds: (0,), gaps: (1,), time: 1765.07, memory: 127187013
 *            41    3010k  1860.11s    10      (gap is 100.0%)
Solution: Feasible, objective: (41,) bounds: (0,), gaps: (1,), time: 1860.11, memory: 127383640
 *            40   31842k  1873.41s     9      (gap is 100.0%)
Solution: Feasible, objective: (40,) bounds: (0,), gaps: (1,), time: 1873.4, memory: 127405675
 *            39   30239k  2005.17s     5      (gap is 100.0%)
Solution: Feasible, objective: (39,) bounds: (0,), gaps: (1,), time: 2005.17, memory: 127988844
 *            38   32349k  2722.35s     6      (gap is 100.0%)
Solution: Feasible, objective: (38,) bounds: (0,), gaps: (1,), time: 2722.35, memory: 129544390
 *            37    6687k  2723.31s    11      (gap is 100.0%)
Solution: Feasible, objective: (37,) bounds: (0,), gaps: (1,), time: 2723.31, memory: 129507160
 *            36   36689k  3026.19s     9      (gap is 100.0%)
Solution: Feasible, objective: (36,) bounds: (0,), gaps: (1,), time: 3026.19, memory: 130061115
 *            35    7951k  3026.44s    11      (gap is 100.0%)
Solution: Feasible, objective: (35,) bounds: (0,), gaps: (1,), time: 3026.44, memory: 130661442
 *            34   36980k  3830.09s     6      (gap is 100.0%)
Solution: Feasible, objective: (34,) bounds: (0,), gaps: (1,), time: 3830.08, memory: 131225805
 *            33   37226k  3830.33s     7      (gap is 100.0%)
Solution: Feasible, objective: (33,) bounds: (0,), gaps: (1,), time: 3830.33, memory: 131956783
 *            32   14813k  4647.34s    10      (gap is 100.0%)
Solution: Feasible, objective: (32,) bounds: (0,), gaps: (1,), time: 4647.34, memory: 132859089
 *            31   43025k  5287.97s     4      (gap is 100.0%)
 ! Time = 5287.97s, Average fail depth = 139, Memory usage = 134.0 MB
 ! Current bound is 0 (gap is 100.0%)
 !          Best Branches  Non-fixed    W       Branch decision
Solution: Feasible, objective: (31,) bounds: (0,), gaps: (1,), time: 5287.97, memory: 134038708
 ! ----------------------------------------------------------------------------
 ! Search terminated by limit, 79 solutions found.
 ! Best objective         : 31 (gap is 100.0%)
 ! Best bound             : 0
 ! ----------------------------------------------------------------------------
 ! Number of branches     : 821401660
 ! Number of fails        : 234494503
 ! Total memory usage     : 137.2 MB (136.9 MB CP Optimizer + 0.3 MB Concert)
 ! Time spent in solve    : 7200.63s (7200.58s engine + 0.05s extraction)
 ! Search speed (br. / s) : 114074.5
 ! ----------------------------------------------------------------------------
EndSearch: Feasible, objective: None bounds: None, gaps: None, time: 7200.62, memory: 136921866
EndSolve: Feasible, objective: None bounds: None, gaps: None, time: 7200.62, memory: 136921610
7201.486039400101
-------------------------------------------------------------------------------
Model constraints: 1667, variables: integer: 0, interval: 449, sequence: 152
Solve status: Feasible
Search status: SearchStopped, stop cause: SearchStoppedByLimit
Solve time: 7200.83 sec
-------------------------------------------------------------------------------
Objective values: (31,), bounds: (0,), gaps: (1,)
Variables:
   I-AUTO-023_lec_0 = (16, 17, 1)
   I-AUTO-023_lec_1 = (32, 33, 1)
   I-AUTO-023_lec_2 = (48, 49, 1)
   I-AUTO-023_lec_3 = (69, 70, 1)
   I-AUTO-023_lec_4 = (17, 18, 1)
   I-AUTO-023_lec_5 = (33, 34, 1)
   I-AUTO-023_lec_6 = (57, 58, 1)
   I-AUTO-023_lec_7 = (77, 78, 1)
   I-AUTO-123_tp_0_g_0 = (6, 8, 2)
   I-AUTO-123_tp_0_g_1 = (2, 4, 2)
   I-AUTO-123_tp_1_g_0 = (34, 36, 2)
   I-AUTO-123_tp_1_g_1 = (38, 40, 2)
   I-FLMA-001_ex_0_g_0 = (10, 11, 1)
   I-FLMA-001_ex_1_g_0 = (37, 38, 1)
   I-FLMA-001_lec_0 = (9, 10, 1)
   I-FLMA-001_lec_1 = (26, 27, 1)
   I-FLMA-001_lec_2 = (56, 57, 1)
   I-FLMA-001_lec_3 = (73, 74, 1)
   I-GCMS-005_lec_0 = (5, 6, 1)
   I-GCMS-005_lec_1 = (25, 26, 1)
   I-GCMS-005_lec_2 = (49, 50, 1)
   I-GCMS-005_lec_3 = (61, 62, 1)
   I-GCMS-005_tp_0_g_0 = (16, 18, 2)
   I-GCMS-005_tp_1_g_0 = (38, 40, 2)
   I-GCMS-021_ex_0_g_0 = (18, 19, 1)
   I-GCMS-021_ex_1_g_0 = (34, 35, 1)
   I-GCMS-021_ex_2_g_0 = (54, 55, 1)
   I-GCMS-021_lec_0 = (29, 30, 1)
   I-GCMS-021_lec_1 = (52, 53, 1)
   I-GCMS-021_lec_2 = (65, 66, 1)
   I-GCMS-022_ex_0_g_0 = (45, 46, 1)
   I-GCMS-022_ex_1_g_0 = (70, 71, 1)
   I-GCMS-022_lec_0 = (40, 41, 1)
   I-GCMS-022_lec_1 = (60, 61, 1)
   I-GCMS-022_lec_2 = (64, 65, 1)
   I-GEOL-001_ex_0_g_0 = (14, 15, 1)
   I-GEOL-001_ex_1_g_0 = (24, 25, 1)
   I-GEOL-001_lec_0 = (12, 13, 1)
   I-GEOL-001_lec_1 = (20, 21, 1)
   I-GEOL-001_lec_2 = (40, 41, 1)
   I-GEOL-001_lec_3 = (64, 65, 1)
   I-GEOL-001_lec_4 = (13, 14, 1)
   I-GEOL-001_tp_0_g_0 = (42, 44, 2)
   I-GEOL-001_tp_1_g_0 = (66, 68, 2)
   I-GEOL-002_lec_0 = (45, 46, 1)
   I-GEOL-002_lec_1 = (60, 61, 1)
   I-GMEC-001_lec_0 = (4, 5, 1)
   I-GMEC-001_lec_1 = (20, 21, 1)
   I-GMEC-001_lec_2 = (5, 6, 1)
   I-GMEC-021_ex_0_g_0 = (15, 16, 1)
   I-GMEC-021_ex_1_g_0 = (35, 36, 1)
   I-GMEC-021_lec_0 = (8, 9, 1)
   I-GMEC-021_lec_1 = (32, 33, 1)
   I-GMEC-021_lec_2 = (40, 41, 1)
   I-GMEC-021_lec_3 = (64, 65, 1)
   I-GMEC-021_tp_0_g_0 = (54, 56, 2)
   I-GMEC-021_tp_0_g_1 = (56, 58, 2)
   I-GMEC-021_tp_0_g_2 = (48, 50, 2)
   I-GMEC-021_tp_0_g_3 = (46, 48, 2)
   I-GMEC-021_tp_1_g_0 = (76, 78, 2)
   I-GMEC-021_tp_1_g_1 = (72, 74, 2)
   I-GMEC-021_tp_1_g_2 = (68, 70, 2)
   I-GMEC-021_tp_1_g_3 = (66, 68, 2)
   I-GMEC-023_ex_0_g_0 = (14, 15, 1)
   I-GMEC-023_lec_0 = (1, 2, 1)
   I-GMEC-023_lec_1 = (21, 22, 1)
   I-GMEC-023_lec_2 = (53, 54, 1)
   I-GMEC-023_lec_3 = (76, 77, 1)
   I-GMEC-023_lec_4 = (6, 7, 1)
   I-GMEC-023_tp_0_g_0 = (12, 14, 2)
   I-GMEC-023_tp_1_g_0 = (30, 32, 2)
   I-GMEC-023_tp_2_g_0 = (58, 60, 2)
   I-GMEC-023_tp_3_g_0 = (78, 80, 2)
   I-GMEC-101_lec_0 = (44, 45, 1)
   I-GMEC-101_lec_1 = (61, 62, 1)
   I-GMEC-101_lec_2 = (68, 69, 1)
   I-GMIN-001_ex_0_g_0 = (6, 7, 1)
   I-GMIN-001_ex_1_g_0 = (33, 34, 1)
   I-GMIN-001_lec_0 = (1, 2, 1)
   I-GMIN-001_lec_1 = (32, 33, 1)
   I-GMIN-001_lec_2 = (44, 45, 1)
   I-GMIN-001_lec_3 = (69, 70, 1)
   I-GMIN-011_lec_0 = (0, 1, 1)
   I-GMIN-011_lec_1 = (21, 22, 1)
   I-GMIN-011_lec_2 = (48, 49, 1)
   I-GMIN-011_lec_3 = (68, 69, 1)
   I-GMIN-011_lec_4 = (4, 5, 1)
   I-GMIN-011_lec_5 = (28, 29, 1)
   I-GPRO-001_lec_0 = (1, 2, 1)
   I-GPRO-001_lec_1 = (33, 34, 1)
   I-GPRO-001_lec_2 = (40, 41, 1)
   I-GPRO-001_lec_3 = (60, 61, 1)
   I-GPRO-028_lec_0 = (22, 23, 1)
   I-GPRO-028_lec_1 = (53, 54, 1)
   I-GPRO-028_lec_2 = (76, 77, 1)
   I-GPRO-028_tp_0_g_0 = (6, 8, 2)
   I-GPRO-028_tp_0_g_1 = (2, 4, 2)
   I-GPRO-028_tp_1_g_0 = (38, 40, 2)
   I-GPRO-028_tp_1_g_1 = (30, 32, 2)
   I-GPRO-029_lec_0 = (0, 1, 1)
   I-GPRO-029_lec_1 = (20, 21, 1)
   I-GPRO-029_lec_2 = (45, 46, 1)
   I-GPRO-029_tp_0_g_0 = (14, 16, 2)
   I-GRCM-031A_pr_0 = (34, 36, 2)
   I-GRCM-031A_pr_1 = (46, 48, 2)
   I-GRCM-031A_pr_2 = (62, 64, 2)
   I-GRME-035_tp_0_g_0 = (50, 52, 2)
   I-GRME-035_tp_1_g_0 = (66, 68, 2)
   I-ILIA-002_lec_0 = (17, 18, 1)
   I-ILIA-002_lec_1 = (24, 25, 1)
   I-ILIA-002_lec_2 = (40, 41, 1)
   I-ILIA-002_tp_0_g_0 = (52, 54, 2)
   I-ILIA-002_tp_0_g_1 = (58, 60, 2)
   I-ILIA-002_tp_0_g_2 = (44, 46, 2)
   I-ILIA-002_tp_0_g_3 = (42, 44, 2)
   I-ILIA-002_tp_1_g_0 = (64, 66, 2)
   I-ILIA-002_tp_1_g_1 = (78, 80, 2)
   I-ILIA-002_tp_1_g_2 = (70, 72, 2)
   I-ILIA-002_tp_1_g_3 = (74, 76, 2)
   I-ILIA-004_lec_0 = (0, 1, 1)
   I-ILIA-004_tp_0_g_0 = (14, 16, 2)
   I-ILIA-004_tp_1_g_0 = (34, 36, 2)
   I-ILIA-004_tp_2_g_0 = (50, 52, 2)
   I-ILIA-024_ex_0_g_0 = (5, 6, 1)
   I-ILIA-024_lec_0 = (4, 5, 1)
   I-ILIA-024_lec_1 = (21, 22, 1)
   I-ILIA-024_pr_0 = (18, 20, 2)
   I-ILIA-024_pr_1 = (38, 40, 2)
   I-ILIA-024_pr_2 = (58, 60, 2)
   I-ILIA-024_pr_3 = (78, 80, 2)
   I-ILIA-024_tp_0_g_0 = (66, 68, 2)
   I-ILIA-100_ch2_0 = (6, 8, 2)
   I-ILIA-100_ch2_1 = (26, 28, 2)
   I-ILIA-100_ch2_2 = (46, 48, 2)
   I-ILIA-100_ch2_3 = (66, 68, 2)
   I-ISIA-001_ex_0_g_0 = (38, 39, 1)
   I-ISIA-001_ex_1_g_0 = (50, 51, 1)
   I-ISIA-001_lec_0 = (24, 25, 1)
   I-ISIA-001_lec_1 = (40, 41, 1)
   I-ISIA-001_lec_2 = (68, 69, 1)
   I-ISIA-001_tp_0_g_0 = (2, 4, 2)
   I-ISIA-001_tp_1_g_0 = (30, 32, 2)
   I-ISIA-001_tp_2_g_0 = (42, 44, 2)
   I-ISIA-020_lec_0 = (0, 1, 1)
   I-ISIA-020_lec_1 = (20, 21, 1)
   I-ISIA-020_lec_2 = (13, 14, 1)
   I-ISIA-020_tp_0_g_0 = (22, 24, 2)
   I-ISIA-021_lec_0 = (45, 46, 1)
   I-ISIA-021_lec_1 = (64, 65, 1)
   I-ISIA-021_lec_2 = (65, 66, 1)
   I-ISIA-021_tp_0_g_0 = (46, 48, 2)
   I-ISIA-021_tp_1_g_0 = (70, 72, 2)
   I-ISIA-030_ex_0_g_0 = (46, 47, 1)
   I-ISIA-030_ex_1_g_0 = (62, 63, 1)
   I-ISIA-030_lec_0 = (13, 14, 1)
   I-ISIA-030_lec_1 = (28, 29, 1)
   I-ISIA-030_lec_2 = (44, 45, 1)
   I-ISIA-030_tp_0_g_0 = (48, 50, 2)
   I-ISIA-030_tp_1_g_0 = (64, 66, 2)
   I-MANA-002_lec_0 = (5, 6, 1)
   I-MANA-002_lec_1 = (29, 30, 1)
   I-MANA-002_lec_2 = (48, 49, 1)
   I-MANA-002_lec_3 = (69, 70, 1)
   I-MANA-102_ch2_0 = (14, 16, 2)
   I-MANA-102_ch2_1 = (34, 36, 2)
   I-MANA-102_ch2_2 = (54, 56, 2)
   I-MANA-102_ch2_3 = (74, 76, 2)
   I-MARO-004_ex_0_g_0 = (13, 14, 1)
   I-MARO-004_ex_1_g_0 = (34, 35, 1)
   I-MARO-004_lec_0 = (9, 10, 1)
   I-MARO-004_lec_1 = (21, 22, 1)
   I-MARO-004_lec_2 = (46, 47, 1)
   I-MARO-004_lec_3 = (61, 62, 1)
   I-MARO-004_lec_4 = (25, 26, 1)
   I-MARO-004_tp_0_g_0 = (70, 72, 2)
   I-MARO-004_tp_0_g_1 = (64, 66, 2)
   I-MARO-014_lec_0 = (20, 21, 1)
   I-MARO-014_lec_1 = (52, 53, 1)
   I-MARO-014_lec_2 = (60, 61, 1)
   I-MARO-014_tp_0_g_0 = (6, 8, 2)
   I-MARO-014_tp_1_g_0 = (22, 24, 2)
   I-MARO-020_ex_0_g_0 = (2, 3, 1)
   I-MARO-020_ex_1_g_0 = (26, 27, 1)
   I-MARO-020_ex_2_g_0 = (53, 54, 1)
   I-MARO-020_ex_3_g_0 = (75, 76, 1)
   I-MARO-020_lec_0 = (1, 2, 1)
   I-MARO-020_lec_1 = (21, 22, 1)
   I-MARO-020_lec_2 = (52, 53, 1)
   I-MARO-020_lec_3 = (65, 66, 1)
   I-MARO-021_ex_0_g_0 = (14, 15, 1)
   I-MARO-021_ex_0_g_1 = (7, 8, 1)
   I-MARO-021_ex_1_g_0 = (22, 23, 1)
   I-MARO-021_ex_1_g_1 = (25, 26, 1)
   I-MARO-021_ex_2_g_0 = (43, 44, 1)
   I-MARO-021_ex_2_g_1 = (42, 43, 1)
   I-MARO-021_ex_3_g_0 = (62, 63, 1)
   I-MARO-021_ex_3_g_1 = (74, 75, 1)
   I-MARO-021_lec_0 = (4, 5, 1)
   I-MARO-021_lec_1 = (20, 21, 1)
   I-MARO-021_lec_2 = (41, 42, 1)
   I-MARO-021_lec_3 = (60, 61, 1)
   I-MARO-024_ex_0_g_0 = (11, 12, 1)
   I-MARO-024_ex_1_g_0 = (38, 39, 1)
   I-MARO-024_lec_0 = (4, 5, 1)
   I-MARO-024_lec_1 = (33, 34, 1)
   I-MARO-024_lec_2 = (50, 51, 1)
   I-MARO-024_lec_3 = (73, 74, 1)
   I-MARO-025_lec_0 = (56, 57, 1)
   I-MARO-025_lec_1 = (72, 73, 1)
   I-MARO-035_ex_0_g_0 = (2, 3, 1)
   I-MARO-035_ex_1_g_0 = (33, 34, 1)
   I-MARO-035_ex_2_g_0 = (42, 43, 1)
   I-MARO-035_lec_0 = (1, 2, 1)
   I-MARO-035_lec_1 = (32, 33, 1)
   I-MARO-035_lec_2 = (40, 41, 1)
   I-MARO-036_ex_0_g_0 = (17, 18, 1)
   I-MARO-036_ex_1_g_0 = (29, 30, 1)
   I-MARO-036_lec_0 = (12, 13, 1)
   I-MARO-036_lec_1 = (24, 25, 1)
   I-MARO-036_lec_2 = (45, 46, 1)
   I-MARO-036_lec_3 = (76, 77, 1)
   I-MARO-120_ch2_0 = (18, 20, 2)
   I-MARO-120_ch2_1 = (38, 40, 2)
   I-MARO-120_ch2_2 = (58, 60, 2)
   I-MARO-120_ch2_3 = (78, 80, 2)
   I-MARO-121_ch2_0 = (2, 4, 2)
   I-MARO-121_ch2_1 = (22, 24, 2)
   I-MARO-121_ch2_2 = (42, 44, 2)
   I-MARO-121_ch2_3 = (62, 64, 2)
   I-META-001_lec_0 = (12, 13, 1)
   I-META-001_lec_1 = (21, 22, 1)
   I-META-001_lec_2 = (16, 17, 1)
   I-META-001_lec_3 = (25, 26, 1)
   I-META-001_tp_0_g_0 = (42, 44, 2)
   I-META-001_tp_1_g_0 = (68, 70, 2)
   I-META-101_lec_0 = (0, 1, 1)
   I-META-101_lec_1 = (24, 25, 1)
   I-META-101_lec_2 = (49, 50, 1)
   I-MRDV-020_ex_0_g_0 = (6, 7, 1)
   I-MRDV-020_ex_1_g_0 = (27, 28, 1)
   I-MRDV-020_lec_0 = (5, 6, 1)
   I-MRDV-020_lec_1 = (24, 25, 1)
   I-MRDV-022_ex_0_g_0 = (12, 13, 1)
   I-MRDV-022_ex_1_g_0 = (30, 31, 1)
   I-MRDV-022_ex_2_g_0 = (51, 52, 1)
   I-MRDV-022_ex_3_g_0 = (63, 64, 1)
   I-MRDV-022_lec_0 = (8, 9, 1)
   I-MRDV-022_lec_1 = (20, 21, 1)
   I-MRDV-022_lec_2 = (47, 48, 1)
   I-MRDV-022_lec_3 = (62, 63, 1)
   I-MRDV-022_lec_4 = (28, 29, 1)
   I-MRDV-022_tp_0_g_0 = (78, 80, 2)
   I-MRDV-022_tp_0_g_1 = (64, 66, 2)
   I-MRDV-022_tp_0_g_2 = (74, 76, 2)
   I-MRDV-022_tp_0_g_3 = (70, 72, 2)
   I-MRDV-023_lec_0 = (77, 78, 1)
   I-MRDV-023_tp_0_g_0 = (44, 46, 2)
   I-MRDV-023_tp_0_g_1 = (52, 54, 2)
   I-MRDV-023_tp_0_g_2 = (42, 44, 2)
   I-MRDV-023_tp_0_g_3 = (58, 60, 2)
   I-MRDV-120_ch2_0 = (10, 12, 2)
   I-MRDV-120_ch2_1 = (30, 32, 2)
   I-MRDV-120_ch2_2 = (50, 52, 2)
   I-MRDV-120_ch2_3 = (70, 72, 2)
   I-PHYS-020_ex_0_g_0 = (16, 17, 1)
   I-PHYS-020_ex_0_g_1 = (17, 18, 1)
   I-PHYS-020_ex_1_g_0 = (36, 37, 1)
   I-PHYS-020_ex_1_g_1 = (34, 35, 1)
   I-PHYS-020_lec_0 = (13, 14, 1)
   I-PHYS-020_lec_1 = (29, 30, 1)
   I-PHYS-020_lec_2 = (45, 46, 1)
   I-PHYS-020_lec_3 = (61, 62, 1)
   I-PHYS-020_tp_0_g_0 = (56, 58, 2)
   I-PHYS-020_tp_0_g_1 = (46, 48, 2)
   I-PHYS-020_tp_0_g_2 = (54, 56, 2)
   I-PHYS-020_tp_0_g_3 = (48, 50, 2)
   I-PHYS-020_tp_1_g_0 = (68, 70, 2)
   I-PHYS-020_tp_1_g_1 = (76, 78, 2)
   I-PHYS-020_tp_1_g_2 = (66, 68, 2)
   I-PHYS-020_tp_1_g_3 = (62, 64, 2)
   I-PHYS-022_ex_0_g_0 = (26, 27, 1)
   I-PHYS-022_lec_0 = (22, 23, 1)
   I-PHYS-022_lec_1 = (57, 58, 1)
   I-PHYS-022_lec_2 = (76, 77, 1)
   I-POLY-001_lec_0 = (0, 1, 1)
   I-POLY-001_lec_1 = (37, 38, 1)
   I-POLY-010_lec_0 = (9, 10, 1)
   I-POLY-010_lec_1 = (33, 34, 1)
   I-POLY-011_pr_0 = (18, 20, 2)
   I-POLY-011_pr_1 = (38, 40, 2)
   I-POLY-011_pr_2 = (58, 60, 2)
   I-POLY-011_pr_3 = (78, 80, 2)
   I-POLY-012_ch2_0 = (14, 16, 2)
   I-POLY-012_ch2_1 = (34, 36, 2)
   I-POLY-012_ch2_2 = (54, 56, 2)
   I-POLY-012_ch2_3 = (74, 76, 2)
   I-SDMA-014_lec_0 = (5, 6, 1)
   I-SDMA-014_lec_1 = (24, 25, 1)
   I-SDMA-014_lec_2 = (44, 45, 1)
   I-SDMA-014_lec_3 = (65, 66, 1)
   I-SDMA-014_lec_4 = (17, 18, 1)
   I-SDMA-014_lec_5 = (32, 33, 1)
   I-SDMA-014_lec_6 = (49, 50, 1)
   I-SDMA-014_tp_0_g_0 = (50, 52, 2)
   I-SDMA-014_tp_1_g_0 = (66, 68, 2)
   I-SDMA-020_ex_0_g_0 = (17, 18, 1)
   I-SDMA-020_ex_0_g_1 = (16, 17, 1)
   I-SDMA-020_ex_1_g_0 = (34, 35, 1)
   I-SDMA-020_ex_1_g_1 = (36, 37, 1)
   I-SDMA-020_lec_0 = (12, 13, 1)
   I-SDMA-020_lec_1 = (28, 29, 1)
   I-SDMA-020_lec_2 = (44, 45, 1)
   I-SDMA-020_tp_0_g_0 = (46, 48, 2)
   I-SDMA-020_tp_0_g_1 = (48, 50, 2)
   I-SDMA-020_tp_0_g_2 = (56, 58, 2)
   I-SDMA-020_tp_0_g_3 = (54, 56, 2)
   I-SDMA-020_tp_1_g_0 = (66, 68, 2)
   I-SDMA-020_tp_1_g_1 = (68, 70, 2)
   I-SDMA-020_tp_1_g_2 = (72, 74, 2)
   I-SDMA-020_tp_1_g_3 = (76, 78, 2)
   I-SDMA-021_ex_0_g_0 = (10, 11, 1)
   I-SDMA-021_lec_0 = (0, 1, 1)
   I-SDMA-021_lec_1 = (37, 38, 1)
   I-SDMA-021_lec_2 = (1, 2, 1)
   I-SDMA-021_tp_0_g_0 = (18, 20, 2)
   I-SDMA-021_tp_0_g_1 = (14, 16, 2)
   I-SDMA-021_tp_0_g_2 = (2, 4, 2)
   I-SDMA-021_tp_0_g_3 = (6, 8, 2)
   I-SDMA-022_lec_0 = (36, 37, 1)
   I-SDMA-022_lec_1 = (41, 42, 1)
   I-SDMA-022_lec_2 = (68, 69, 1)
   I-SDMA-022_tp_0_g_0 = (58, 60, 2)
   I-SDMA-022_tp_0_g_1 = (42, 44, 2)
   I-SDMA-022_tp_0_g_2 = (52, 54, 2)
   I-SDMA-022_tp_0_g_3 = (44, 46, 2)
   I-SDMA-120_ch2_0 = (6, 8, 2)
   I-SDMA-120_ch2_1 = (26, 28, 2)
   I-SDMA-120_ch2_2 = (46, 48, 2)
   I-SDMA-120_ch2_3 = (66, 68, 2)
   I-SDMA-121_ch2_0 = (10, 12, 2)
   I-SDMA-121_ch2_1 = (30, 32, 2)
   I-SDMA-121_ch2_2 = (50, 52, 2)
   I-SDMA-121_ch2_3 = (70, 72, 2)
   I-SEMI-001_ex_0_g_0 = (74, 75, 1)
   I-SEMI-001_lec_0 = (8, 9, 1)
   I-SEMI-001_lec_1 = (36, 37, 1)
   I-SEMI-001_lec_2 = (41, 42, 1)
   I-SEMI-001_lec_3 = (72, 73, 1)
   I-SEMI-001_tp_0_g_0 = (46, 48, 2)
   I-SEMI-001_tp_0_g_1 = (52, 54, 2)
   I-SEMI-001_tp_0_g_2 = (42, 44, 2)
   I-SEMI-001_tp_0_g_3 = (54, 56, 2)
   I-TELE-003_lec_0 = (4, 5, 1)
   I-TELE-003_lec_1 = (25, 26, 1)
   I-TELE-003_lec_2 = (5, 6, 1)
   I-TELE-003_lec_3 = (28, 29, 1)
   I-TELE-003_lec_4 = (12, 13, 1)
   I-TELE-003_lec_5 = (29, 30, 1)
   I-TELE-003_tp_0_g_0 = (14, 16, 2)
   I-TELE-003_tp_0_g_1 = (18, 20, 2)
   I-TELE-004_lec_0 = (44, 45, 1)
   I-TELE-004_lec_1 = (60, 61, 1)
   I-TELE-004_lec_2 = (49, 50, 1)
   I-TELE-004_lec_3 = (61, 62, 1)
   I-TELE-004_tp_0_g_0 = (54, 56, 2)
   I-TELE-004_tp_0_g_1 = (58, 60, 2)
   I-TELE-004_tp_1_g_0 = (66, 68, 2)
   I-TELE-004_tp_1_g_1 = (62, 64, 2)
   I-TRMO-003_lec_0 = (4, 5, 1)
   I-TRMO-003_lec_1 = (28, 29, 1)
   I-TRMO-003_lec_2 = (48, 49, 1)
   I-TRMO-003_lec_3 = (61, 62, 1)
   I-TRMO-003_lec_4 = (13, 14, 1)
   I-TRMO-003_lec_5 = (29, 30, 1)
   I-TRMO-003_lec_6 = (52, 53, 1)
   I-TRMO-003_lec_7 = (64, 65, 1)
   I-TRMO-020_ex_0_g_0 = (55, 56, 1)
   I-TRMO-020_ex_1_g_0 = (66, 67, 1)
   I-TRMO-020_ex_2_g_0 = (67, 68, 1)
   I-TRMO-020_lec_0 = (16, 17, 1)
   I-TRMO-020_lec_1 = (32, 33, 1)
   I-TRMO-020_lec_2 = (49, 50, 1)
   I-TRMO-020_lec_3 = (60, 61, 1)
   I-TRMO-020_lec_4 = (54, 55, 1)
   I-TRMO-120_ch2_0 = (2, 4, 2)
   I-TRMO-120_ch2_1 = (22, 24, 2)
   I-TRMO-120_ch2_2 = (42, 44, 2)
   I-TRMO-120_ch2_3 = (62, 64, 2)
   S-INFO-013_lec_0 = (16, 17, 1)
   S-INFO-013_lec_1 = (25, 26, 1)
   S-INFO-013_lec_2 = (53, 54, 1)
   S-INFO-013_lec_3 = (61, 62, 1)
   S-INFO-013_tp_0_g_0 = (68, 70, 2)
   V-LANG-151_ex_0_g_0 = (48, 49, 1)
   V-LANG-151_ex_0_g_1 = (42, 43, 1)
   V-LANG-151_ex_0_g_2 = (42, 43, 1)
   V-LANG-151_ex_0_g_3 = (54, 55, 1)
   V-LANG-151_ex_0_g_4 = (46, 47, 1)
   V-LANG-151_ex_0_g_5 = (43, 44, 1)
   V-LANG-151_ex_0_g_6 = (43, 44, 1)
   V-LANG-151_ex_0_g_7 = (43, 44, 1)
   V-LANG-151_ex_1_g_0 = (63, 64, 1)
   V-LANG-151_ex_1_g_1 = (63, 64, 1)
   V-LANG-151_ex_1_g_2 = (63, 64, 1)
   V-LANG-151_ex_1_g_3 = (66, 67, 1)
   V-LANG-151_ex_1_g_4 = (62, 63, 1)
   V-LANG-151_ex_1_g_5 = (62, 63, 1)
   V-LANG-151_ex_1_g_6 = (68, 69, 1)
   V-LANG-151_ex_1_g_7 = (68, 69, 1)
   V-LANG-153_ex_0_g_0 = (6, 7, 1)
   V-LANG-153_ex_0_g_1 = (2, 3, 1)
   V-LANG-153_ex_0_g_2 = (6, 7, 1)
   V-LANG-153_ex_0_g_3 = (2, 3, 1)
   V-LANG-153_ex_1_g_0 = (27, 28, 1)
   V-LANG-153_ex_1_g_1 = (23, 24, 1)
   V-LANG-153_ex_1_g_2 = (23, 24, 1)
   V-LANG-153_ex_1_g_3 = (31, 32, 1)
   V-LANG-153_ex_2_g_0 = (42, 43, 1)
   V-LANG-153_ex_2_g_1 = (44, 45, 1)
   V-LANG-153_ex_2_g_2 = (58, 59, 1)
   V-LANG-153_ex_2_g_3 = (52, 53, 1)
   V-LANG-153_ex_3_g_0 = (74, 75, 1)
   V-LANG-153_ex_3_g_1 = (74, 75, 1)
   V-LANG-153_ex_3_g_2 = (78, 79, 1)
   V-LANG-153_ex_3_g_3 = (78, 79, 1)
   V-LANG-155_ex_0_g_0 = (15, 16, 1)
   V-LANG-155_ex_0_g_1 = (1, 2, 1)
   V-LANG-155_ex_0_g_2 = (7, 8, 1)
   V-LANG-155_ex_0_g_3 = (3, 4, 1)
   V-LANG-155_ex_1_g_0 = (23, 24, 1)
   V-LANG-155_ex_1_g_1 = (21, 22, 1)
   V-LANG-155_ex_1_g_2 = (22, 23, 1)
   V-LANG-155_ex_1_g_3 = (30, 31, 1)
   V-LANG-155_ex_2_g_0 = (55, 56, 1)
   V-LANG-155_ex_2_g_1 = (51, 52, 1)
   V-LANG-155_ex_2_g_2 = (46, 47, 1)
   V-LANG-155_ex_2_g_3 = (57, 58, 1)
   V-LANG-155_ex_3_g_0 = (71, 72, 1)
   V-LANG-155_ex_3_g_1 = (75, 76, 1)
   V-LANG-155_ex_3_g_2 = (62, 63, 1)
   V-LANG-155_ex_3_g_3 = (70, 71, 1)
   V-LANG-161_ch2_0 = (0, 2, 2)
   V-LANG-161_ch2_1 = (20, 22, 2)
   V-LANG-161_ch2_2 = (40, 42, 2)
   V-LANG-161_ch2_3 = (60, 62, 2)
   V-LANG-162_ch2_0 = (4, 6, 2)
   V-LANG-162_ch2_1 = (24, 26, 2)
   V-LANG-162_ch2_2 = (44, 46, 2)
   V-LANG-162_ch2_3 = (64, 66, 2)
